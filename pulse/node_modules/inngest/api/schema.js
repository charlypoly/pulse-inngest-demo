"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.batchSchema = exports.stepsSchemas = exports.errorSchema = void 0;
const zod_1 = require("zod");
const InngestExecution_1 = require("../components/execution/InngestExecution");
const types_1 = require("../types");
exports.errorSchema = zod_1.z.object({
    error: zod_1.z.string(),
    status: zod_1.z.number(),
});
exports.stepsSchemas = {
    [InngestExecution_1.ExecutionVersion.V0]: zod_1.z
        .record(zod_1.z.any().refine((v) => typeof v !== "undefined", {
        message: "Values in steps must be defined",
    }))
        .optional()
        .nullable(),
    [InngestExecution_1.ExecutionVersion.V1]: zod_1.z
        .record(zod_1.z
        .object({
        type: zod_1.z.literal("data").optional().default("data"),
        data: zod_1.z.any().refine((v) => typeof v !== "undefined", {
            message: "Data in steps must be defined",
        }),
    })
        .strict()
        .or(zod_1.z
        .object({
        type: zod_1.z.literal("error").optional().default("error"),
        error: types_1.jsonErrorSchema,
    })
        .strict())
        /**
         * If the result isn't a distcint `data` or `error` object, then it's
         * likely that the executor has set this directly to a value, for example
         * in the case of `sleep` or `waitForEvent`.
         *
         * In this case, pull the entire value through as data.
         */
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        .or(zod_1.z.any().transform((v) => ({ type: "data", data: v }))))
        .default({}),
};
exports.batchSchema = zod_1.z.array(zod_1.z.record(zod_1.z.any()).transform((v) => v));
//# sourceMappingURL=schema.js.map